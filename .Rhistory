as.numeric()
return(result)
}
getData <- function (x) {
items <- x %>% read_html() %>% html_nodes(css = 'section.content_ty4')
# 웹 데이터를 수집하여 df 객체에 할당
df <-
data.frame(
name = x %>% read_html() %>% html_nodes(css = 'h1.name') %>% html_text(),
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
comcode = items %>% html_attr(name = 'data-company_id')
#  리뷰코드 = items %>% html_attr(name = 'data-content_id'),
#  직종구분 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(2)'),
#  재직상태 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(4)'),
#  근무지역 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(6)'),
# 등록일자 = getHtmlText(x = items, css = 'div.content_top_ty2 span.txt2'),
# 별점평가 = getHtmlRate(x = items, css = 'div.star_score', name = 'style'),
# 승진기회 = getHtmlRate(x = items, css = 'dl dd:nth-child(3) div div', name = 'style'),
# 복지급여 = getHtmlRate(x = items, css = 'dl dd:nth-child(5) div div', name = 'style'),
# 워라밸   = getHtmlRate(x = items, css = 'dl dd:nth-child(7) div div', name = 'style'),
# 사내문화 = getHtmlRate(x = items, css = 'dl dd:nth-child(9) div div', name = 'style'),
# 경영진   = getHtmlRate(x = items, css = 'dl dd:nth-child(11) div div', name = 'style')
# 기업장점 = getHtmlText(x = items, css = 'div div div section:nth-child(1) div div.ctbody_col2 div dl dd:nth-child(2) span')
# 기업장점 = getHtmlText(x = items, css = 'dl dd:nth-child(2) span')
# 기업단점 = getHtmlText(x = items, css = 'dl dd:nth-child(4) span')
# 바라는점 = getHtmlText(x = items, css = 'dl dd:nth-child(6) span')
# 성장예상 = getHtmlText(x = items, css = 'p.etc_box strong')
# 추천여부 = getHtmlText(x = items, css = 'p.txt.recommend.etc_box')
)
return(df)
}
pages <- ceiling(x = reviewCnt / 5)
print(x = pages)
result <- getData(x = resp)
print(result)
getHtmlText <- function (x, css) {
result <- x %>%
html_nodes(css = css) %>%
html_text()
return(result)
}
getHtmlRate <- function (x, css, name) {
result <- x %>%
html_nodes(css = css) %>%
html_attr(name, name) %>%
str_remove_all(pattern = '(width:)|(%;)') %>%
as.numeric()
return(result)
}
getData <- function (x) {
items <- x %>% read_html() %>% html_nodes(css = 'section.content_ty4')
# 웹 데이터를 수집하여 df 객체에 할당
df <-
data.frame(
name = x %>% read_html() %>% html_nodes(css = 'h1.name') %>% html_text(),
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
comcode = items %>% html_attr(name = 'data-company_id'),
#  리뷰코드 = items %>% html_attr(name = 'data-content_id'),
#  직종구분 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(2)'),
#  재직상태 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(4)'),
#  근무지역 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(6)'),
# 등록일자 = getHtmlText(x = items, css = 'div.content_top_ty2 span.txt2'),
# 별점평가 = getHtmlRate(x = items, css = 'div.star_score', name = 'style'),
# 승진기회 = getHtmlRate(x = items, css = 'dl dd:nth-child(3) div div', name = 'style'),
# 복지급여 = getHtmlRate(x = items, css = 'dl dd:nth-child(5) div div', name = 'style'),
# 워라밸   = getHtmlRate(x = items, css = 'dl dd:nth-child(7) div div', name = 'style'),
# 사내문화 = getHtmlRate(x = items, css = 'dl dd:nth-child(9) div div', name = 'style'),
# 경영진   = getHtmlRate(x = items, css = 'dl dd:nth-child(11) div div', name = 'style')
# 기업장점 = getHtmlText(x = items, css = 'div div div section:nth-child(1) div div.ctbody_col2 div dl dd:nth-child(2) span')
advt = getHtmlText(x = items, css = 'dl dd:nth-child(2) span')
# 기업단점 = getHtmlText(x = items, css = 'dl dd:nth-child(4) span')
# 바라는점 = getHtmlText(x = items, css = 'dl dd:nth-child(6) span')
# 성장예상 = getHtmlText(x = items, css = 'p.etc_box strong')
# 추천여부 = getHtmlText(x = items, css = 'p.txt.recommend.etc_box')
)
return(df)
}
pages <- ceiling(x = reviewCnt / 5)
print(x = pages)
result <- getData(x = resp)
print(result)
getHtmlText <- function (x, css) {
result <- x %>%
html_nodes(css = css) %>%
html_text()
return(result)
}
getHtmlRate <- function (x, css, name) {
result <- x %>%
html_nodes(css = css) %>%
html_attr(name, name) %>%
str_remove_all(pattern = '(width:)|(%;)') %>%
as.numeric()
return(result)
}
getData <- function (x) {
items <- x %>% read_html() %>% html_nodes(css = 'section.content_ty4')
# 웹 데이터를 수집하여 df 객체에 할당
df <-
data.frame(
name = x %>% read_html() %>% html_nodes(css = 'h1.name') %>% html_text(),
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
comcode = items %>% html_attr(name = 'data-company_id'),
#  리뷰코드 = items %>% html_attr(name = 'data-content_id'),
#  직종구분 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(2)'),
#  재직상태 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(4)'),
#  근무지역 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(6)'),
# 등록일자 = getHtmlText(x = items, css = 'div.content_top_ty2 span.txt2'),
# 별점평가 = getHtmlRate(x = items, css = 'div.star_score', name = 'style'),
# 승진기회 = getHtmlRate(x = items, css = 'dl dd:nth-child(3) div div', name = 'style'),
# 복지급여 = getHtmlRate(x = items, css = 'dl dd:nth-child(5) div div', name = 'style'),
# 워라밸   = getHtmlRate(x = items, css = 'dl dd:nth-child(7) div div', name = 'style'),
# 사내문화 = getHtmlRate(x = items, css = 'dl dd:nth-child(9) div div', name = 'style'),
# 경영진   = getHtmlRate(x = items, css = 'dl dd:nth-child(11) div div', name = 'style')
# 기업장점 = getHtmlText(x = items, css = 'div div div section:nth-child(1) div div.ctbody_col2 div dl dd:nth-child(2) span')
advt = getHtmlText(x = items, css = 'dl dd:nth-child(2) span'),
disadt = getHtmlText(x = items, css = 'dl dd:nth-child(4) span')
# 바라는점 = getHtmlText(x = items, css = 'dl dd:nth-child(6) span')
# 성장예상 = getHtmlText(x = items, css = 'p.etc_box strong')
# 추천여부 = getHtmlText(x = items, css = 'p.txt.recommend.etc_box')
)
return(df)
}
pages <- ceiling(x = reviewCnt / 5)
print(x = pages)
result <- getData(x = resp)
print(result)
getHtmlText <- function (x, css) {
result <- x %>%
html_nodes(css = css) %>%
html_text()
return(result)
}
getHtmlRate <- function (x, css, name) {
result <- x %>%
html_nodes(css = css) %>%
html_attr(name, name) %>%
str_remove_all(pattern = '(width:)|(%;)') %>%
as.numeric()
return(result)
}
getData <- function (x) {
items <- x %>% read_html() %>% html_nodes(css = 'section.content_ty4')
# 웹 데이터를 수집하여 df 객체에 할당
df <-
data.frame(
comName = x %>% read_html() %>% html_nodes(css = 'h1.name') %>% html_text(),
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
comcode = items %>% html_attr(name = 'data-company_id'),
#  리뷰코드 = items %>% html_attr(name = 'data-content_id'),
reviewCode= items %>% html_attr(name = 'data-content_id'),
#  직종구분 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(2)'),
category = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(2)'),
#  재직상태 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(4)'),
onBoard = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(4)'),
#  근무지역 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(6)'),
area = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(6)'),
# 등록일자 = getHtmlText(x = items, css = 'div.content_top_ty2 span.txt2'),
regDate = getHtmlText(x = items, css = 'div.content_top_ty2 span.txt2'),
# 별점평가 = getHtmlRate(x = items, css = 'div.star_score', name = 'style'),
starRate = getHtmlRate(x = items, css = 'div.star_score', name = 'style'),
# 승진기회 = getHtmlRate(x = items, css = 'dl dd:nth-child(3) div div', name = 'style'),
promotChance = getHtmlRate(x = items, css = 'dl dd:nth-child(3) div div', name = 'style'),
# 복지급여 = getHtmlRate(x = items, css = 'dl dd:nth-child(5) div div', name = 'style'),
welfare = getHtmlRate(x = items, css = 'dl dd:nth-child(5) div div', name = 'style'),
# 워라밸   = getHtmlRate(x = items, css = 'dl dd:nth-child(7) div div', name = 'style'),
wlValance  = getHtmlRate(x = items, css = 'dl dd:nth-child(7) div div', name = 'style'),
# 사내문화 = getHtmlRate(x = items, css = 'dl dd:nth-child(9) div div', name = 'style'),
culture = getHtmlRate(x = items, css = 'dl dd:nth-child(9) div div', name = 'style'),
# 경영진   = getHtmlRate(x = items, css = 'dl dd:nth-child(11) div div', name = 'style')
execMem = getHtmlRate(x = items, css = 'dl dd:nth-child(11) div div', name = 'style'),
# 기업장점 = getHtmlText(x = items, css = 'div div div section:nth-child(1) div div.ctbody_col2 div dl dd:nth-child(2) span')
comAdv = getHtmlText(x = items, css = 'dl dd:nth-child(2) span'),
# 기업단점
comDisadv = getHtmlText(x = items, css = 'dl dd:nth-child(4) span'),
# 바라는점 = getHtmlText(x = items, css = 'dl dd:nth-child(6) span')
reqPoint = getHtmlText(x = items, css = 'dl dd:nth-child(6) span'),
# 성장예상 = getHtmlText(x = items, css = 'p.etc_box strong')
growth = getHtmlText(x = items, css = 'p.etc_box strong'),
# 추천여부 = getHtmlText(x = items, css = 'p.txt.recommend.etc_box')
recommand = getHtmlText(x = items, css = 'p.txt.recommend.etc_box')
)
return(df)
}
pages <- ceiling(x = reviewCnt / 5)
print(x = pages)
result <- getData(x = resp)
print(result)
getHtmlText <- function (x, css) {
result <- x %>%
html_nodes(css = css) %>%
html_text()
return(result)
}
getHtmlRate <- function (x, css, name) {
result <- x %>%
html_nodes(css = css) %>%
html_attr(name, name) %>%
str_remove_all(pattern = '(width:)|(%;)') %>%
as.numeric()
return(result)
}
getData <- function (x) {
items <- x %>% read_html() %>% html_nodes(css = 'section.content_ty4')
# 웹 데이터를 수집하여 df 객체에 할당
df <-
data.frame(
comName = x %>% read_html() %>% html_nodes(css = 'h1.name') %>% html_text(),
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
# 회사이름 = x %>% read_html() %>% html_node(css = 'h1.name') %>% html_text()
comcode = items %>% html_attr(name = 'data-company_id'),
#  리뷰코드 = items %>% html_attr(name = 'data-content_id'),
reviewCode= items %>% html_attr(name = 'data-content_id'),
#  직종구분 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(2)'),
category = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(2)'),
#  재직상태 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(4)'),
onBoard = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(4)'),
#  근무지역 = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(6)'),
area = getHtmlText(x = items, css = 'div.content_top_ty2 span:nth-child(6)'),
# 등록일자 = getHtmlText(x = items, css = 'div.content_top_ty2 span.txt2'),
regDate = getHtmlText(x = items, css = 'div.content_top_ty2 span.txt2'),
# 별점평가 = getHtmlRate(x = items, css = 'div.star_score', name = 'style'),
starRate = getHtmlRate(x = items, css = 'div.star_score', name = 'style'),
# 승진기회 = getHtmlRate(x = items, css = 'dl dd:nth-child(3) div div', name = 'style'),
promotChance = getHtmlRate(x = items, css = 'dl dd:nth-child(3) div div', name = 'style'),
# 복지급여 = getHtmlRate(x = items, css = 'dl dd:nth-child(5) div div', name = 'style'),
welfare = getHtmlRate(x = items, css = 'dl dd:nth-child(5) div div', name = 'style'),
# 워라밸   = getHtmlRate(x = items, css = 'dl dd:nth-child(7) div div', name = 'style'),
wlValance  = getHtmlRate(x = items, css = 'dl dd:nth-child(7) div div', name = 'style'),
# 사내문화 = getHtmlRate(x = items, css = 'dl dd:nth-child(9) div div', name = 'style'),
culture = getHtmlRate(x = items, css = 'dl dd:nth-child(9) div div', name = 'style'),
# 경영진   = getHtmlRate(x = items, css = 'dl dd:nth-child(11) div div', name = 'style')
execMem = getHtmlRate(x = items, css = 'dl dd:nth-child(11) div div', name = 'style'),
# 기업장점 = getHtmlText(x = items, css = 'div div div section:nth-child(1) div div.ctbody_col2 div dl dd:nth-child(2) span')
comAdv = getHtmlText(x = items, css = 'dl dd:nth-child(2) span'),
# 기업단점
comDisadv = getHtmlText(x = items, css = 'dl dd:nth-child(4) span'),
# 바라는점 = getHtmlText(x = items, css = 'dl dd:nth-child(6) span')
reqPoint = getHtmlText(x = items, css = 'dl dd:nth-child(6) span'),
# 성장예상 = getHtmlText(x = items, css = 'p.etc_box strong')
growth = getHtmlText(x = items, css = 'p.etc_box strong'),
# 추천여부 = getHtmlText(x = items, css = 'p.txt.recommend.etc_box')
recomm = getHtmlText(x = items, css = 'p.txt.recommend.etc_box')
)
return(df)
}
pages <- ceiling(x = reviewCnt / 5)
print(x = pages)
result <- getData(x = resp)
print(result)
for (page in 2:pages) {
startTime <- Sys.time()
cat('[', page, '/', pages, '] 현재 진행 중! ')
cURI <- str_c(URI, '?page=', page)
resp <- GET(url = cURI, config = list(cookies = myCookies))
df <- getData(x = resp)
result <- rbind(result, df)
endTime <- Sys.time()
(endTime - startTime) %>% print()
rm(resp, df)
}
for (page in 2:pages) {
startTime <- Sys.time()
# cat('[', page, '/', pages, '] 현재 진행 중! ')
cat('[', page, '/', pages, '] processing!! ')
cURI <- str_c(URI, '?page=', page)
resp <- GET(url = cURI, config = list(cookies = myCookies))
df <- getData(x = resp)
result <- rbind(result, df)
endTime <- Sys.time()
(endTime - startTime) %>% print()
rm(resp, df)
}
install.packages(c("descr", "fmsb"))
# 필요한 패키지를 불러옵니다.
library(tidyverse)
library(stringr)
library(stringi)
library(lubridate)
library(magrittr)
# 그래프 제목으로 자주 사용할 회사이름을 지정합니다.
compNm <- 'afreecatv'
# RDS 파일을 읽습니다.
dt <- readRDS(file = '../Company_Review_Data_afreecatv.RDS')
# 필요한 패키지를 불러옵니다.
library(tidyverse)
library(stringr)
library(stringi)
library(lubridate)
library(magrittr)
# 그래프 제목으로 자주 사용할 회사이름을 지정합니다.
compNm <- 'afreecatv'
# RDS 파일을 읽습니다.
dt <- readRDS(file = './Company_Review_Data_afreecatv.RDS')
names(dt)
head(dt)
# 별점을 1~5점으로 환산합니다.
dt[, 8:13] <- sapply(X = dt[, 8:13], FUN = function(x) x / 20)
# 추천여부 컬럼을 '추천'과 '비추'로 변환합니다.
dt$recomm <- str_extract(string = dt$recomm, pattern = '추천(?= )')
dt$recomm[is.na(x = dt$recomm) == TRUE] <- '비추'
# 성장예상과 추천여부 컬럼을 범주형으로 변환합니다.
dt$growth <- factor(x = dt$growth)
dt$recomm <- factor(x = dt$recomm)
# 등록일자를 날짜형 벡터로 변환합니다.
dt$regDate <- as.Date(x = dt$regDate, format = '%Y/%m/%d')
# 등록연도 컬럼을 추가합니다.
dt$regYear <- year(dt$regDate)
# setting flotlib conf.
mytheme <- theme(
panel.grid = element_blank(),
panel.background = element_rect(fill = 'white', color = 'white', size = 1.2),
plot.background = element_blank(),
plot.title = element_text(family = 'NanumGothic', face = 'bold', hjust = 0.5, size = 14),
axis.title = element_text(family = 'NanumGothic'),
axis.text.x = element_text(size = 10, face = 'bold'),
axis.text.y = element_text(family = 'NanumGothic'),
axis.ticks = element_blank(),
strip.text.x = element_text(size = 10, face = 'bold', family = 'NanumGothic'),
strip.text.y = element_text(size = 10, face = 'bold', angle = 270, family = 'NanumGothic'),
strip.background.y = element_rect(fill = 'gray80', color = 'white'),
legend.title = element_text(family = 'NanumGothic'),
legend.text = element_text(family = 'NanumGothic'),
legend.position = 'bottom')
# 추천/비추 여부 막대그래프를 그립니다.
drawBarPlot <- function(data, workGb, var) {
# 빈도테이블을 생성합니다.
tbl <- data[data$onBoard == workGb, c('comName', var)] %>% table() %>% t()
# 막대그래프를 그립니다.
bp <- barplot(height = tbl,
ylim = c(0, max(tbl)*1.25),
names.arg = rownames(x = tbl),
beside = TRUE,
# legend = TRUE,
main = str_c(workGb, var, sep = ' ') )
# 빈도수를 추가합니다.
text(x = bp, y = tbl, labels = tbl, pos = 3)
}
# 그래픽 파라미터를 설정합니다.
par(mfrow = c(2, 2), family = 'NanumGothic', mar = c(5, 4, 4, 2))
# 막대그래프를 그립니다.
drawBarPlot(data = dt, workGb = '전직원', var = 'recomm')
drawBarPlot(data = dt, workGb = '전직원', var = 'growth')
drawBarPlot(data = dt, workGb = '현직원', var = 'recomm')
drawBarPlot(data = dt, workGb = '현직원', var = 'growth')
# install.packages("descr")
library(descr)
chisqTest <- function(var1, var2) {
# 변수를 설정합니다.
v1 <- eval(expr = parse(text = str_c('dt', var1, sep = '$')))
v2 <- eval(expr = parse(text = str_c('dt', var2, sep = '$')))
# 빈도테이블을 생성합니다.
tbl <- table(v1, v2)
# 교차테이블을 생성합니다.
CrossTable(x = tbl,
expected = TRUE,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE) %>%
print()
# 카이제곱 검정을 실시합니다.
chisq.test(x = tbl) %>% print()
}
# 재직상태 * 성장예상
chisqTest(var1 = 'onBoard', var2 = 'growth')
chisqTest(var1 = 'onBoard', var2 = 'recomm')
drawBarLinePlot <- function(data, workGb, var) {
# 등록연도가 없는 행을 삭제합니다.
data <- data[complete.cases(data$regYear), ]
if (var == "growth") {
# 성장예상 데이터가 없는 경우(NODATA) 데이터 플임에서 삭제
data <- data[!(data$growth == "NODATA"), ]
}
# 빈도테이블을 생성합니다.
tbl <- data %>%
dplyr::filter(onBoard == workGb & !is.na(eval(expr = parse(text = var)))) %>%
select(c('regYear', var)) %>%
group_by(regYear, eval(expr = parse(text = var))) %>%
summarize(freqen = n()) %>%
mutate(rate = (freqen / sum(freqen) * 100) %>% round(digits = 1L))
# 두 번째 컬럼명을 var로 변경합니다.
colnames(x = tbl)[2] <- var
# 홀수행의 비중을 NA로 치환합니다.
rowNums <- seq(from = 1, to = nrow(x = tbl), by = 2)
tbl$rate[rowNums] <- NA
# ggplot() 함수를 이용하여 막대그래프를 그립니다.
ggplot(data = tbl,
mapping = aes_string(x = 'regYear', y = 'freqen', fill = var)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(mapping = aes(label = freqen),
position = position_dodge(width = 0.9),
vjust = -1) +
geom_line(mapping = aes_string(x = 'regYear', y = 'rate', color = var, group = var),
size = 1.2,
stat = 'identity',
position = position_dodge(width = 0.9)) +
geom_point(mapping = aes_string(x = 'regYear', y = 'rate', color = var, group = var),
shape = 21,
fill = 'white',
stroke = 2.0,
size = 2.4,
stat = 'identity',
position = position_dodge(width = 0.9)) +
geom_text(mapping = aes(y = rate, label = rate),
fontface = 'bold',
position = position_dodge(width = 0.9),
vjust = -1.5,
hjust = 0.5) +
coord_cartesian(ylim = c(0, max(tbl$freqen, tbl$rate, na.rm = TRUE) * 1.1)) +
scale_fill_manual(values = c('gray80', 'gray50')) +
scale_color_manual(values = c('black', 'red')) +
ggtitle(label = str_c('regYear', workGb, var, sep = ' ')) +
mytheme +
theme(axis.title = element_blank())
}
drawBarLinePlot(data = dt, workGb = '전직원', var = 'growth')
drawBarLinePlot(data = dt, workGb = '전직원', var = 'recomm')
# install.packages('devtools')
# library(devtools) not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
library(RColorBrewer)
library(JLutils)
install_github("larmarange/JLutils")
install.packages('devtools')
# library(devtools) not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
# library(RColorBrewer)
# library(JLutils)
install_github("larmarange/JLutils")
# install.packages('devtools')
library(devtools) not supported on 3.6.1 Ver.
# install.packages('devtools')
library(devtools) # not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
# library(RColorBrewer)
# library(JLutils)
install_github("larmarange/JLutils")
install_github("larmarange/JLutils")
install_github("larmarange/JLutils")
install_github("larmarange/JLutils")
install_github("larmarange/JLutils")
# install.packages('devtools')
library(devtools) # not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
# library(RColorBrewer)
# library(JLutils)
# install.packages('devtools')
library(devtools) # not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
library(RColorBrewer)
# library(JLutils)
# install.packages('devtools')
# library(devtools) # not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
# library(RColorBrewer)
library(JLutils)
# install.packages('devtools')
# library(devtools) # not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
# library(RColorBrewer)
install.packages('devtools')
# library(JLutils)
install.packages("devtools")
# install.packages('devtools')
# library(devtools) # not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
# library(RColorBrewer)
install.packages('JLutils')
# library(JLutils)
# install.packages('devtools')
# library(devtools) # not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
# library(RColorBrewer)
# install.packages('JLutils')
# library(JLutils)
install_github("larmarange/JLutils")
# install.packages('devtools')
library(devtools) # not supported on 3.6.1 Ver.
# install_github("larmarange/JLutils") console 설치
# library(RColorBrewer)
# install.packages('JLutils')
# library(JLutils)
install_github("larmarange/JLutils")
# 재직상태에 따른 별점평가(총점) 빈도수를 확인합니다.
pts <- table(dt$onBoard, dt$starRate) %>%
set_colnames(value = str_c('starRate', 1:5)) %>%
as.data.frame() %>%
set_colnames(value = c('onBoard', 'starRate', 'frequen'))
# 재직상태에 따른 별점평가(총점) 빈도수를 확인합니다.
pts <- table(dt$onBoard, dt$starRate) %>%
set_colnames(value = str_c('starRate', 1:5)) %>%
as.data.frame() %>%
set_colnames(value = c('onBoard', 'starRate', 'frequen'))
# 재직상태에 따른 별점평가(총점) 빈도수를 확인합니다.
pts <- table(dt$onBoard, dt$starRate) %>% set_colnames(value = str_c('starRate', 1:5)) %>%
as.data.frame() %>%
set_colnames(value = c('onBoard', 'starRate', 'frequen'))
# 재직상태에 따른 별점평가(총점) 빈도수를 확인합니다.
pts <- table(dt$onBoard, dt$starRate) %>% set_colnames(value = str_c('starRate', 1:5)) %>% as.data.frame() %>% set_colnames(value = c('onBoard', 'starRate', 'frequen'))
pts <- table(dt$onBoard, dt$starRate) %>% set_colnames(value = str_c('starRate', 1:5)) %>% as.data.frame() %>% set_colnames(value = c('onBoard', 'starRate', 'frequen'))
# install.packages('devtools')
# library(devtools) # not supported on 3.6.1 Ver.
# library(RColorBrewer)
# install.packages('JLutils')
library(JLutils)
# install_github("larmarange/JLutils")
pts <- table(dt$onBoard, dt$starRate) %>% set_colnames(value = str_c('starRate', 1:5)) %>% as.data.frame() %>% set_colnames(value = c('onBoard', 'starRate', 'frequen'))
